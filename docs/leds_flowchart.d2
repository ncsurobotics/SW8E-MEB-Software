vars_global: Global Variables {
	red: Red Array
	blue: Blue Array
	green: Green Array
}

args_set_one: Set One - Arguments {
	led: led (int)
	value: value (uint32_t)
}
fnc_set_one: Set One {
	bounds_chk: Check that assignment is a valid LED
	assign_red: Insert RED value
	assign_grn: Insert GREEN value
	assign_blu: Insert BLUE value
	return: Return

	bounds_chk -> return: LED is an invalid LED
	bounds_chk -> assign_red: LED is a valid LED
	assign_red -> assign_grn
	assign_grn -> assign_blu
	assign_blu -> return
}
args_set_one.led -> fnc_set_one.bounds_chk
args_set_one.value -> fnc_set_one.assign_red
args_set_one.value -> fnc_set_one.assign_grn
args_set_one.value -> fnc_set_one.assign_blu

args_set_all: Set All - Arguments {
	value: value (uint32_t)
}
fnc_set_all: Set All {
	loop_con_chk: Check if number of loop iterations is lower than maximum number of LEDs
	call: Call set_One
	return: Return

	loop_con_chk -> return: If not assigning to a valid LED
	loop_con_chk -> call: If still assigning to a valid LED
}
args_set_all.value -> fnc_set_all.call
fnc_set_all.call -> fnc_set_one
fnc_set_one -> fnc_set_all.loop_con_chk

args_write_LED: Write LED - Arguments {
	r_value: r (uint8_t)
	g_value: g (uint8_t)
	b_value: b (uint8_t)
}

fnc_write_LED: Write LED {
	split_g_r_b_channels: Write g,r, and b bits to a single string
	check_if_1: Check if individual bit is a 1
	send_1_code: Send code for "1" with SPI
	send_0_code: Send code for "0" with SPI
	goto_next_bit: Go to next bit in string

	split_g_r_b_channels -> check_if_1
	check_if_1 -> send_1_code: If bit is "1"
	check_if_1 -> send_0_code: If bit is "0"
	send_1_code -> goto_next_bit
	send_0_code -> goto_next_bit
	goto_next_bit -> check_if_1: If remaining bits
}

args_write_LED.r_value -> fnc_write_LED.split_g_r_b_channels
args_write_LED.g_value -> fnc_write_LED.split_g_r_b_channels
args_write_LED.b_value -> fnc_write_LED.split_g_r_b_channels

fnc_update_LEDs: Update LEDs {
	call_write_led: Call write_LED
	delay: Delay
	call_write_led -> delay
	delay -> call_write_led
}

vars_global.red -> fnc_update_LEDS.call_write_led
vars_global.green -> fnc_update_LEDS.call_write_led
vars_global.blue -> fnc_update_LEDS.call_write_led

fnc_reset_strip: Reset Strip {
	call_write_led: Write 0's to write_LED
	delay: Delay
	call_write_led -> delay
	delay -> call_write_led
}
